//
//  AppDelegate.swift
//  Avatar world city life mod
//
//  Created by Alex N
//

import UIKit
import Pushwoosh
import Adjust
import IQKeyboardManagerSwift
import AVFoundation
<<<<<<< HEAD
=======
import Reachability
>>>>>>> dev

@main
class AppDelegate: UIResponder, UIApplicationDelegate {
    
    var window: UIWindow?
    private var appCoordinator: AppCoordinator_AW?
    

    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
        // Override point for customization after application launch.
        
        do {
            try AVAudioSession.sharedInstance().setCategory(.playback)
            try AVAudioSession.sharedInstance().setActive(true)
        } catch {
            print("Error setting up AVAudioSession: \(error.localizedDescription)")
        }
        
<<<<<<< HEAD
=======
        
>>>>>>> dev
        window = UIWindow(frame: UIScreen.main.bounds)
        window?.rootViewController = UIStoryboard(name: "LaunchScreen", bundle: nil).instantiateInitialViewController()
        window?.makeKeyAndVisible()
        
        if let window = self.window {
            self.appCoordinator = AppCoordinator_AW(window: window)
        }
        
        NetworkStatusMonitor_AW.shared.startMonitoring_AW()
        ThirdPartyServicesManager_AW.shared.initializeAdjust_AW()
        ThirdPartyServicesManager_AW.shared.initializePushwoosh_AW(delegate: self)
        ThirdPartyServicesManager_AW.shared.initializeInApps_AW()
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 1.1) {
            ThirdPartyServicesManager_AW.shared.makeATT_AW()
        }
        
        
        IQKeyboardManager.shared.enable = true
        
        return true
    }
}


extension AppDelegate : PWMessagingDelegate {
    
    //handle token received from APNS
    func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {
       
        Adjust.setDeviceToken(deviceToken)
        Pushwoosh.sharedInstance().handlePushRegistration(deviceToken)
    }
    
    //handle token receiving error
    func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {
        
        Pushwoosh.sharedInstance().handlePushRegistrationFailure(error);
    }
    
    //this is for iOS < 10 and for silent push notifications
    func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {
        
        Pushwoosh.sharedInstance().handlePushReceived(userInfo)
        completionHandler(.noData)
    }
    
    //this event is fired when the push gets received
    func pushwoosh(_ pushwoosh: Pushwoosh, onMessageReceived message: PWMessage) {
       
        print("onMessageReceived: ", message.payload?.description ?? "error")
    }
    
    //this event is fired when a user taps the notification
    func pushwoosh(_ pushwoosh: Pushwoosh, onMessageOpened message: PWMessage) {

        print("onMessageOpened: ", message.payload?.description ?? "error")
    }
}
